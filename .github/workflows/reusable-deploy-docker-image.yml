name: Reusable Docker image deploy workflow

on:
  workflow_call:
   inputs:
      service_name:
        required: true
        type: string

      deploy_command:
        required: true
        type: string
      image_name:
          required: true
          type: string


jobs:
    evaluate-environment:
        runs-on: ubuntu-latest
        outputs:
          environment: ${{ steps.set-env.outputs.environment }}
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Evaluate environment value
            id: set-env
            run: |
              if [ "${{ github.ref }}" == "refs/heads/main" ]; then
                echo "ENVIRONMENT=prod" >> $GITHUB_ENV
                echo "::set-output name=environment::prod"
              else
                echo "ENVIRONMENT=dev" >> $GITHUB_ENV
                echo "::set-output name=environment::dev"
              fi
          - name: Print environment value
            run: echo "Environment is $ENVIRONMENT"

    deploy:
        runs-on: ubuntu-latest
        needs: evaluate-environment
        env:
            ENVIRONMENT: ${{ needs.evaluate-environment.outputs.environment }}

        environment:
            name: ${{ needs.evaluate-environment.outputs.environment }}
        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Azure Login
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Azure CLI script
          uses: azure/cli@v2
          with:
              azcliversion: latest
              inlineScript: |

                az_container_reg=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
                echo "AZURE-CONTAINER-REGISTRY=$az_container_reg" >> $GITHUB_ENV

                az_container_reg_un=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY-USER-NAME --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
                echo "AZURE-CONTAINER-REGISTRY-USER-NAME=$az_container_reg_un" >> $GITHUB_ENV

                az_container_reg_pwd=$(az keyvault secret show --name AZURE-CONTAINER-REGISTRY-PASSWORD --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv)
                echo "AZURE-CONTAINER-REGISTRY-PASSWORD=$az_container_reg_pwd" >> $GITHUB_ENV

        - name: Set Image name
          id: image-name
          run: |
              echo "IMAGE_NAME=${{ env.AZURE-CONTAINER-REGISTRY }}/${{ inputs.image_name }}:${{ github.run_number }}" >> $GITHUB_ENV

        - name: Set Azure App Service container settings
          if: ${{ inputs.deploy_command == 'app-service' }}
          run: |
            az webapp config container set \
              --name  ${{ inputs.service_name }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --container-image-name   ${{ env.IMAGE_NAME }} \
              --container-registry-url https://${{ env.AZURE-CONTAINER-REGISTRY }} \
              --container-registry-user ${{ env.AZURE-CONTAINER-REGISTRY-USER-NAME }} \
              --container-registry-password ${{ env.AZURE-CONTAINER-REGISTRY-PASSWORD }}

        - name: Set Azure Function App container settings
          if: ${{ inputs.deploy_command == 'function-app' }}
          run: |
            az functionapp config container set \
              --name ${{ inputs.service_name }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --docker-custom-image-name  ${{ env.IMAGE_NAME }}  \
              --docker-registry-server-url https://${{ secrets.AZURE_CONTAINER_REGISTRY }} \
              --docker-registry-server-user ${{ secrets.AZURE_CONTAINER_REGISTRY_USER_NAME }} \
              --docker-registry-server-password ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
